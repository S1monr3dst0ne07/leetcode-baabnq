use 'libs/math.baabnq';
use 'libs/chunk.baabnq';

put _len = 4;

new _len _pNums;
put 11  -> _pNums + 0;
put 7  -> _pNums + 1;
put 15 -> _pNums + 2;
put 2 -> _pNums + 3;

put _target = 9;


"make copy for sorting
push _pNums;
sub Chunk::Copy;
pull _pSorted;


"sort nums
push _pSorted;
sub Chunk::Sort;

"two pointer to find the values
put _pLow  = _pSorted;
put _pHigh = _pSorted + _len - 1;


lab PointerLoop;
    put _low  <- _pLow;
    put _high <- _pHigh;
    put _sum = _low + _high;

    jump FoundValues ~ _sum == _target;
  
    push _pLow;  sub Math::Inc ~ _target > _sum; pull _pLow;
    push _pHigh; sub Math::Dec ~ _target < _sum; pull _pHigh;

jump PointerLoop ~ _pLow < _pHigh;

"no solution found, halt
asm 'brk';

"linear search to find indices
lab FoundValues;

put _indexLow  = 0;
put _indexHigh = 0;

put _i = 0;
lab IndicesLoop;
    put __ <- _pNums + _i;

    jump IndicesLoop::SkipSetLow  ~ __ != _low;  put _indexLow  = _i; lab IndicesLoop::SkipSetLow;
    jump IndicesLoop::SkipSetHigh ~ __ != _high; put _indexHigh = _i; lab IndicesLoop::SkipSetHigh;

    put _i = _i + 1;
jump IndicesLoop ~ _i < _len;


"done
print _indexLow;
print _indexHigh;


"free memory
free _pNums;
free _pSorted;
